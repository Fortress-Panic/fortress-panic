#!/usr/bin/env node
// jshint esversion:8
/**
 * Module dependencies.
 */
var app = require('../app');
var http = require('http');
const configDB = require('../config/properties');
const socketIO = require('socket.io');
const playerCardsState = require('../player-cards/player-cards.state');
const playerDeckState = require('../player-deck/player-deck.state');
const MonstersState = require('../monsters/monsters.states');
const monstersModel = require('../monsters/monsters.dao');
const defensesState = require('../defenses/defenses.states');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || configDB.PORT;
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO(server);

let players = {};
let started = {};
let bossNumber = Math.round(Math.random());
let finalBoss = {};

io.on("connection", (socket) => {
  console.log("New client connected at id: " + socket.id);
  players[socket.id] = {
    playerId: socket.id,
    displayName: 'Player ' + socket.id.slice(0,4),
    playerCards: [],
    points: 0,
    logged: false,
    currentTurn: false,
    room: socket.id
  };

  socket.on('leave', function(ns) {
    if (players[socket.id].currentTurn) {
      let playerIndex = Object.keys(players).filter(pl => players[pl].room === ns).indexOf(socket.id);
      players[socket.id].room = socket.id;
      let inRoomPlayers = Object.keys(players).filter(pl => players[pl].room === ns);
      let nextPlayer = inRoomPlayers[playerIndex % inRoomPlayers.length];
      setTimeout(function() {
        socket.to(ns).emit('startDisconnectDrawPhase', [ns, nextPlayer]);
      }, 1500);
    } else {
      players[socket.id].room = socket.id;
    }
    socket.leave(ns);
    let inRoomPlayers = {};
    for (let i in players) {
      if (players[i].room === ns) {
        inRoomPlayers[i] = players[i];
      }
    }
    io.in(ns).emit('disconnect', socket.id);
    io.in(ns).emit('disconnectUpdate', inRoomPlayers);
    // socket.emit('resetGame');
    socket.emit('resetStart');
    players[socket.id].points = 0;
  });

  socket.on('setNamespace', function(obj) {
    players[obj[0]].room = obj[1];
    socket.join(obj[1]);
    started[obj[1]] = started[obj[1]] || [false];
    if (Object.keys(players).filter(pl => players[pl].room === obj[1]).length === 1) {
      initializePhase(obj[1]);
    }

      // send the players object to the new player
    setTimeout(function() {
      let inRoomPlayers = {};
      for (let i in players) {
        if (players && players[i] && (players[i].room === obj[1])) {
          inRoomPlayers[i] = players[i];
        }
      }
      socket.emit('currentPlayers', inRoomPlayers);
  
      socket.emit('getDefenses', obj[1]);
  
      socket.emit('getMonsters', obj[1]);
  
      socket.emit('hasGameStarted', started[obj[1]][0]);
  
      socket.emit('getScores', inRoomPlayers);
  
      socket.to(obj[1]).emit('getCurrentPlayer', socket.id);
      socket.to(obj[1]).emit('getCurrentPhase', socket.id);
        // update all other players of the new player
      socket.to(players[socket.id].room).emit('newPlayer', players[socket.id]);
    }, 7500);

  });

  socket.on('initiateCheckStarted', function() {
    socket.emit('startCheckingStarted');
  });

  socket.on('startLoading', function() {
    socket.emit('clientStartLoading');
  });

  socket.on('returnCurrentPhase', function(obj) {
      io.in(obj[0]).emit('setCurrentPhase', obj);
  });

  socket.on('returnCurrentPlayer', function(obj) {
    io.in(obj[0]).emit('updateCurrentPlayer', obj);
  });

  socket.on('firstStartButtonPress', function(ns) {
    started[ns][0] = true;
    socket.to(ns).emit('otherPlayerStartedGame', 'THE GAME HAS STARTED.');
    let currentPlayer = main(ns);
    socket.emit('startClientDrawPhase', [ns, currentPlayer, 0]);
  });

  socket.on('playerLogin', function(id) {
    players[socket.id].logged = true; 
    io.in(players[id].room).emit('updateLoginName', id);
  });

  socket.on('logOutPlayer', function(id) {
    players[id].displayName = 'Player ' + id.slice(0,4);
    players[socket.id].logged = false;
    socket.to(players[id].room).emit('logOutPlayer', id);
    socket.to(players[id].room).emit('changeName', [id, 'Player ' + id.slice(0,4)]);
  });

  socket.on('sendMessage', function(data){
    io.in(players[socket.id].room).emit('receiveMessage', data);
  });

  socket.on('goToNextPhase', function() {
    socket.to(players[socket.id.room]).emit('nextPhase');
  });

  socket.on('isStarted?', function() {
    socket.emit('isStartedResponse', started[players[socket.id].room][0]);
  });

  socket.on('cardUpdate', function(id) {
    io.in(players[socket.id].room).emit('updatePlayerCards', [players[socket.id].room, id]);
  });

  socket.on('nameChange', function(obj) {
    players[obj[0]].displayName = obj[1];
    socket.to(players[obj[0].room]).emit('changeName', obj);
  });

  socket.on('setCurrentPlayer', function(id) {
    socket.to(players[id].room).emit('setCurrentPlayer', id);
  });

  socket.on('returnID', function(id) {
    socket.emit('setCurrentPhase', [id, 'DRAW UP']);
  });

  socket.on('startDrawPhase', function (obj) {
    console.log('DRAW PHASE');
    io.in(obj[0]).emit('setCurrentPlayer', obj[1]);
    Object.keys(players).filter(pl => players[pl].room === obj[0]).forEach(player => {
      if (players[player].playerId === String(obj[1])) {
        players[player].currentTurn = true;
      } else {
        players[player].currentTurn = false;
      }
    });
    playerCardsState.addPlayerCard(obj[0], obj[1], Math.max(maxHandSize[Object.keys(players).length] - obj[2]), 0);
    io.in(obj[0]).emit('getIDs');
    setTimeout(function() {
      io.in(obj[0]).emit('updatePlayerCards', [obj[0], obj[1]]);
    }, 1250);
    setTimeout(function() {
      io.in(obj[0]).emit('nextPhase');
      socket.emit('startClientDiscardPhase', [obj[0], obj[1]]);
    }, 2250);
  });

  socket.on('startDiscardPhase', function(obj) {
    console.log('DISCARD PHASE');
    io.in(obj[0]).emit('allowDiscard');
  });

  socket.on('discardAndDraw', function(obj) {
    playerCardsState.discardCard(obj[1]);
    playerCardsState.addPlayerCard(players[socket.id].room, obj[0], 1);
    setTimeout(function() {
      io.in(players[socket.id].room).emit('updatePlayerCards', [players[socket.id].room, obj[0]]);
    }, 750);
  });

  socket.on('startTradePhase', function(id) {
    console.log('TRADE PHASE');
    io.in(players[id].room).emit('allowTrade');
    socket.to(players[id].room).emit('nextPhase');
  });

  socket.on('tradeTargetSet', function(obj) {
    io.in(players[obj[0].position].room).emit('initiateTrade', obj);
  });

  socket.on('tradeResult', function(obj) {
    io.in(players[obj[0]].room).emit('displayTradeResult', obj);
  });

  socket.on('tradeAccepted', function(obj) {
    playerCardsState.tradeCards(obj[0].position, obj[1].position, obj[0]._id, obj[1]._id);
    setTimeout(function() {
      io.in(players[obj[0].position].room).emit('updatePlayerCards', [players[obj[0].position].room, obj[0].position]);
      io.in(players[obj[0].position].room).emit('updatePlayerCards', [players[obj[0].position].room, obj[1].position]);
    }, 500);
  });

  socket.on('startPlayPhase', function(id) {
    console.log('PLAY PHASE');
    socket.to(players[id].room).emit('nextPhase');
  });

  socket.on('playCard', function(obj) {
    if (obj.key < 29) {
      io.in(players[obj.position].room).emit('playHitCard', [obj.position, monsterRegions[obj.key]]);
    } else if (obj.key === 29) {
      io.in(players[obj.position].room).emit('playSlayerCard', [obj.position, monsterRegions[obj.key]]);
    } else if (obj.key > 29 && obj.key < 37) {
      io.in(players[obj.position].room).emit('playHitCard', [obj.position, monsterRegions[obj.key]]);
    } else if (obj.key > 36 && obj.key < 39) {
      io.in(players[obj.position].room).emit('playDriveItBackCard', obj.position);
    } else if (obj.key > 38 && obj.key < 41) {
      io.in(players[obj.position].room).emit('playNiceShotCard', obj.position);
    } else if (obj.key > 40 && obj.key < 43) {
      io.in(players[obj.position].room).emit('playMissingCard', obj.position);
    } else if (obj.key > 42 && obj.key < 47) {
        if (obj.name === 'BRICK') {
          io.in(players[obj.position].room).emit('playBrickCard', obj.position);
        } else if (obj.name === 'MORTAR') {
          io.in(players[obj.position].room).emit('playMortarCard', obj.position);
        }
    } else if (obj.key > 46 && obj.key < 49) {
      io.in(players[obj.position].room).emit('playJokerCard', obj.position);
    }
  });

  socket.on('hitArmor', function(id) {
      io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
      socket.emit('getSelectedCard');
  });

  socket.on('hitMonster', function(id) {
    MonstersState.hitMonster(id)
    .then(() => {
      io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
      socket.emit('getSelectedCard');
    });
    // setTimeout(function() {
    //   io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
    // }, 250);
    // socket.emit('getSelectedCard');
  });

  socket.on('killMonster', function(id) {
    MonstersState.killMonster(id).then(() => {
      io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
      socket.emit('getSelectedCard');
    });
    // setTimeout(function() {
    //   io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
    // }, 250);
    // socket.emit('getSelectedCard');
  });

  socket.on('addPoints', function(obj) {
    players[obj[0]].points += obj[1];
    io.in(players[socket.id].room).emit('updateScore', obj);
  });

  socket.on('driveItBack', function(obj) {
    monstersModel.findByIdAndUpdate(obj[0], {location: 'forest ' + obj[1].slice(obj[1].length - 1)}).exec();
    setTimeout(function() {
      io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
    }, 400);
    socket.emit('getSelectedCard');
  });

  socket.on('niceShot', function() {
    socket.emit('getSelectedCard');
  });

  socket.on('missing', function() {
    socket.emit('getSelectedCard');
  });

  socket.on('joker', function(obj) {
    playerCardsState.addPlayerCard(players[obj[0]].room, obj[0], Math.min(Math.max(6 - obj[1], 0), 2));
    setTimeout(function() {
      io.in(players[obj[0]].room).emit('updatePlayerCards', [players[obj[0]].room, obj[0]]);
    }, 750);
  });

  socket.on('rebuild', function(loc) {
    defensesState.rebuildWall(players[socket.id].room, loc.slice(loc.length-1));
    setTimeout(function() {
      io.in(players[socket.id].room).emit('getDefenses', players[socket.id].room);
    }, 1500);
  });

  socket.on('returnSelectedCard', function(obj) {
    playerCardsState.discardCard(obj[1]._id);
    setTimeout(function() {
      io.in(players[obj[0]].room).emit('updatePlayerCards', [players[obj[0]].room, obj[0]]);
    }, 600);
  });

  socket.on('startMoveMonstersPhase', function(id) {
    console.log('MOVE MONSTERS PHASE');
    socket.to(players[id].room).emit('nextPhase');
    MonstersState.moveMonsters(players[id].room, null);
    setTimeout(function() {
      io.in(players[id].room).emit('endPlayPhase', id);
    }, 250);
  });

  socket.on('moveMonsters', function(id) {
    setTimeout(function() {
      io.in(players[id].room).emit('getMonsters', players[socket.id].room);
      io.in(players[id].room).emit('getDefenses', players[socket.id].room);
      if (finalBoss[players[id].room] === undefined) {
        socket.emit('checkSpawnFinalBoss');
      }
    }, 4750);
    setTimeout(function() {
      io.in(players[id].room).emit('nextPhase');
      socket.emit('startClientSpawnMonstersPhase', id);
    }, 5500);
  });

  socket.on('spawnFinalBoss', function() {
    finalBoss[players[socket.id].room] = MonstersState.spawnFinalBoss(players[socket.id].room, bossNumber);
    io.in(players[socket.id].room).emit('incomingMessage', 'PREPARE FOR FINAL BOSS.');
  });

  socket.on('startSpawnMonstersPhase', function(missing) {
    console.log('SPAWN MONSTERS PHASE');
    if (finalBoss[players[socket.id].room]) {
      MonstersState.finalBossEffect(players[socket.id].room, bossNumber);
    }
    if (!missing) {
      MonstersState.clearMonsters(players[socket.id].room);
      MonstersState.addMonster(players[socket.id].room, 2);
      setTimeout(function() {
        setTimeout(function() {
          io.in(players[socket.id].room).emit('getMonsters', players[socket.id].room);
        }, 2500);
        setTimeout(function() {
          io.in(players[socket.id].room).emit('getDefenses', players[socket.id].room);
        }, 2750);
        setTimeout(function() {
          io.in(players[socket.id].room).emit('updateAllPlayerCards');
        }, 1000);
        setTimeout(function() {
          io.in(players[socket.id].room).emit('openMonsterDisplay', MonstersState.drawnMonsters[players[socket.id].room]);
        }, 1000);
      }, 1250);

    } else {
      io.in(players[socket.id].room).emit('missingPlayed');
      setTimeout(function() {
        io.in(players[socket.id].room).emit('getDefenses', players[socket.id].room);
      }, 2750);
    }
  
    setTimeout(function() {
      io.in(players[socket.id].room).emit('findCurrentPlayerId');
    }, 7000);
  });

  socket.on('returnIdsForUpdate', function(id) {
    io.in(players[id].room).emit('updatePlayerCards', [players[id].room, id]);
  });

  socket.on('returnCurrentPlayerId', function(obj) {
    let inRoomPlayers = Object.keys(players).filter(player => players[player].room === players[obj[0]].room);
    let nextPlayerId = inRoomPlayers[(inRoomPlayers.indexOf(obj[0]) + 1) % inRoomPlayers.length];
    socket.emit('startClientDrawPhase', [players[obj[0]].room, nextPlayerId, obj[1]]);
  });

  // socket.on('startCheckWinGame', function() {
  //   socket.emit('checkWinGame');
  // });

  // socket.on('startCheckLoseGame', function() {
  //   socket.emit('checkLoseGame');
  // });

  socket.on('startLoseGame', function(id) {
    socket.emit('loseGame', id);
  });

  socket.on('startWinGame', function(id) {
    socket.emit('winGame', id);
  });

  socket.on('startResetGame', function() {
    socket.emit('resetGame');
  });

  socket.on("disconnect", () => {
    let room = players[socket.id].room;
    let RoomPlayers = {};
    if (players[socket.id].currentTurn) {
      let playerIndex = Object.keys(players).filter(pl => players[pl].room === room).indexOf(socket.id);
      // console.log("Client disconnected at id: " + socket.id);
      delete players[socket.id];
      for (let i in players) {
        if (players[i].room === room) {
          RoomPlayers[i] = players[i];
        }
      }
      io.in(room).emit('disconnect', socket.id);
      io.in(room).emit('disconnectUpdate', RoomPlayers);
      let inRoomPlayers = Object.keys(players).filter(pl => players[pl].room === room);
      let nextPlayer = inRoomPlayers[playerIndex % inRoomPlayers.length];
      setTimeout(function() {
        socket.to(room).emit('startDisconnectDrawPhase', [room, nextPlayer]);
      }, 1500);
    } else {
      // console.log("Client disconnected at id: " + socket.id);
      delete players[socket.id];
      for (let i in players) {
        if (players[i].room === room) {
          RoomPlayers[i] = players[i];
        }
      }
      io.in(room).emit('disconnect', socket.id);
      io.in(room).emit('disconnectUpdate', RoomPlayers);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {console.log(`Listening on port ${port}`)});

// GAME LOGIC
let maxHandSize = {1: 6, 2: 5, 3: 5, 4: 5, 5: 4, 6: 4};

let monsterRegions = {
  0: ['archer 1', 'archer 2'],
  1: ['archer 1', 'archer 2'],
  2: ['archer 1', 'archer 2'],
  3: ['knight 1', 'knight 2'],
  4: ['knight 1', 'knight 2'],
  5: ['knight 1', 'knight 2'],
  6: ['swordsman 1', 'swordsman 2'],
  7: ['swordsman 1', 'swordsman 2'],
  8: ['swordsman 1', 'swordsman 2'],
  9: ['archer 3', 'archer 4'],
  10: ['archer 3', 'archer 4'],
  11: ['archer 3', 'archer 4'],
  12: ['knight 3', 'knight 4'],
  13: ['knight 3', 'knight 4'],
  14: ['knight 3', 'knight 4'],
  15: ['swordsman 3', 'swordsman 4'],
  16: ['swordsman 3', 'swordsman 4'],
  17: ['swordsman 3', 'swordsman 4'],
  18: ['archer 5', 'archer 6'],
  19: ['archer 5', 'archer 6'],
  20: ['archer 5', 'archer 6'],
  21: ['knight 5', 'knight 6'],
  22: ['knight 5', 'knight 6'],
  23: ['knight 5', 'knight 6'],
  24: ['swordsman 5', 'swordsman 6'],
  25: ['swordsman 5', 'swordsman 6'],
  26: ['swordsman 5', 'swordsman 6'],
  27: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6'],
  28: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6'],
  29: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6', 
      'archer 1', 'archer 2', 'archer 3', 'archer 4', 'archer 5', 'archer 6', 
      'knight 1', 'knight 2', 'knight 3', 'knight 4', 'knight 5', 'knight 6',
      'swordsman 1', 'swordsman 2', 'swordsman 3', 'swordsman 4', 'swordsman 5', 'swordsman 6',
      'forest 1', 'forest 2', 'forest 3', 'forest 4', 'forest 5', 'forest 6'],
  30: ['archer 1', 'archer 2', 'archer 3', 'archer 4', 'archer 5', 'archer 6'],
  31: ['knight 1', 'knight 2', 'knight 3', 'knight 4', 'knight 5', 'knight 6'],
  32: ['swordsman 1', 'swordsman 2', 'swordsman 3', 'swordsman 4', 'swordsman 5', 'swordsman 6'],
  33: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6', 
      'archer 1', 'archer 2', 'archer 3', 'archer 4', 'archer 5', 'archer 6', 
      'knight 1', 'knight 2', 'knight 3', 'knight 4', 'knight 5', 'knight 6',
      'swordsman 1', 'swordsman 2', 'swordsman 3', 'swordsman 4', 'swordsman 5', 'swordsman 6',
      'forest 1', 'forest 2', 'forest 3', 'forest 4', 'forest 5', 'forest 6'],
  34: ['castle 1', 'castle 2', 'archer 1', 'archer 2', 'knight 1', 'knight 2', 'swordsman 1', 'swordsman 2', 'forest 1', 'forest 2'],
  35: ['castle 5', 'castle 6', 'archer 5', 'archer 6', 'knight 5', 'knight 6', 'swordsman 5', 'swordsman 6', 'forest 5', 'forest 6'],
  36: ['castle 3', 'castle 4', 'archer 3', 'archer 4', 'knight 3', 'knight 4', 'swordsman 3', 'swordsman 4', 'forest 3', 'forest 4'],
  37: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6', 
      'archer 1', 'archer 2', 'archer 3', 'archer 4', 'archer 5', 'archer 6', 
      'knight 1', 'knight 2', 'knight 3', 'knight 4', 'knight 5', 'knight 6',
      'swordsman 1', 'swordsman 2', 'swordsman 3', 'swordsman 4', 'swordsman 5', 'swordsman 6',
      'forest 1', 'forest 2', 'forest 3', 'forest 4', 'forest 5', 'forest 6'],
  38: ['castle 1', 'castle 2', 'castle 3', 'castle 4', 'castle 5', 'castle 6', 
      'archer 1', 'archer 2', 'archer 3', 'archer 4', 'archer 5', 'archer 6', 
      'knight 1', 'knight 2', 'knight 3', 'knight 4', 'knight 5', 'knight 6',
      'swordsman 1', 'swordsman 2', 'swordsman 3', 'swordsman 4', 'swordsman 5', 'swordsman 6',
      'forest 1', 'forest 2', 'forest 3', 'forest 4', 'forest 5', 'forest 6']
};

const initializePhase = async (ns) => {
  started[ns][0] = false;
  MonstersState.clearBoard(ns)
  .then(() => MonstersState.initializeBoard(ns))
  .then(() => playerDeckState.removePlayerCardIndices(ns))
  .then(() => playerCardsState.clearPlayerCards(ns))
  .then(() => playerDeckState.initializePlayerDeck(ns));
  // MonstersState.initializeBoard(ns);
  // playerDeckState.removePlayerCardIndices(ns);
  // playerCardsState.clearPlayerCards(ns);
  // playerDeckState.initializePlayerDeck(ns);
};

// GAME LOOP
let player;
const main = (namespace) => {
    // START GAME
    player = Object.keys(players).filter(pl => players[pl].room === namespace)[0];
    return player;
};


